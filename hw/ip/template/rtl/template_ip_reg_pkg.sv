// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package template_ip_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 4;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {logic q;} en;
    struct packed {logic q;} clr;
  } template_ip_reg2hw_ctrl_reg_t;

  typedef struct packed {logic [31:0] q;} template_ip_reg2hw_din_0_reg_t;

  typedef struct packed {logic [31:0] q;} template_ip_reg2hw_din_1_reg_t;

  typedef struct packed {logic [31:0] q;} template_ip_reg2hw_result_reg_t;

  typedef struct packed {
    struct packed {
      logic d;
      logic de;
    } en;
    struct packed {
      logic d;
      logic de;
    } clr;
  } template_ip_hw2reg_ctrl_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } template_ip_hw2reg_din_0_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } template_ip_hw2reg_din_1_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } template_ip_hw2reg_result_reg_t;

  // Register -> HW type
  typedef struct packed {
    template_ip_reg2hw_ctrl_reg_t   ctrl;    // [97:96]
    template_ip_reg2hw_din_0_reg_t  din_0;   // [95:64]
    template_ip_reg2hw_din_1_reg_t  din_1;   // [63:32]
    template_ip_reg2hw_result_reg_t result;  // [31:0]
  } template_ip_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    template_ip_hw2reg_ctrl_reg_t   ctrl;    // [102:99]
    template_ip_hw2reg_din_0_reg_t  din_0;   // [98:66]
    template_ip_hw2reg_din_1_reg_t  din_1;   // [65:33]
    template_ip_hw2reg_result_reg_t result;  // [32:0]
  } template_ip_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] TEMPLATE_IP_CTRL_OFFSET = 4'h0;
  parameter logic [BlockAw-1:0] TEMPLATE_IP_DIN_0_OFFSET = 4'h4;
  parameter logic [BlockAw-1:0] TEMPLATE_IP_DIN_1_OFFSET = 4'h8;
  parameter logic [BlockAw-1:0] TEMPLATE_IP_RESULT_OFFSET = 4'hc;

  // Register index
  typedef enum int {
    TEMPLATE_IP_CTRL,
    TEMPLATE_IP_DIN_0,
    TEMPLATE_IP_DIN_1,
    TEMPLATE_IP_RESULT
  } template_ip_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] TEMPLATE_IP_PERMIT[4] = '{
      4'b0001,  // index[0] TEMPLATE_IP_CTRL
      4'b1111,  // index[1] TEMPLATE_IP_DIN_0
      4'b1111,  // index[2] TEMPLATE_IP_DIN_1
      4'b1111  // index[3] TEMPLATE_IP_RESULT
  };

endpackage

